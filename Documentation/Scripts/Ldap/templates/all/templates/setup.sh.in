divert(-1)

For each role, we define five functions, ROLE_functions which expands
to any shell function definitions used by the other parts, ROLE_test
which expands to shell commands that tests that installation for the
role can actually be done on the machine, ROLE_shutdown which expands
to shell commands to shut down any services prior to configuring them,
ROLE_configure that actually sets up the system, and ROLE_restart that
restarts any services with the new configuration.


####### The OpenLDAP Server #######

define(<m4quote>ldap_functions</m4quote>, <m4quote>dnl
# Function to wait for LDAP server to come up
wait_for_ldap_server_to_come_up () {
 echo -n "Waiting for LDAP server to be connectable (If this hangs, please check LDAP server log file for errors and try to start i manually)..."
 while ldapsearch -x > /dev/null 2>&1; [ "$?" == 1 ]; do
  sleep 10
 done
 echo "connectable."
}

</m4quote>)


define(<m4quote>ldap_test</m4quote>, <m4quote>dnl
if [ -e  "skeleton(ldap_dbdir)/skeleton(ldap_realm_dnsname)" ]; then
 cat <<EOF

A database with the LDAP realm skeleton(ldap_realm) already exists.
Please remove it
(rm -rf skeleton(ldap_dbdir)/skeleton(ldap_realm_dnsname)).
EOF
 exit 1
fi
</m4quote>)

define(<m4quote>ldap_shutdown</m4quote>, <m4quote>dnl
# Shut down Open LDAP database server
skeleton(ldap_stop)

</m4quote>)

define(<m4quote>ldap_configure</m4quote>, <m4quote>dnl
echo "Creating LDAP database directory..."
mkdir skeleton(ldap_dbdir)/skeleton(ldap_realm_dnsname)
chown ldap:ldap skeleton(ldap_dbdir)/skeleton(ldap_realm_dnsname)
chmod 700 skeleton(ldap_dbdir)/skeleton(ldap_realm_dnsname)

# Restart the Open LDAP database server
skeleton(ldap_start)
wait_for_ldap_server_to_come_up

echo "Populating LDAP database..."
ldapadd -x -y admin_password.secret -D cn=admin,skeleton(ldap_realm) -f basecontent.ldif
echo "Setting passwords..."
ldappasswd -x -y admin_password.secret -D cn=admin,skeleton(ldap_realm) cn=admin,skeleton(ldap_realm) -T admin_password.secret
ldappasswd -x -y admin_password.secret -D cn=admin,skeleton(ldap_realm) uid=superadmin,ou=Administrators,ou=People,skeleton(ldap_realm) -T superadmin_password.secret
ldappasswd -x -y admin_password.secret -D cn=admin,skeleton(ldap_realm) uid=demoadmin,ou=Administrators,ou=People,skeleton(ldap_realm) -T demoadmin_password.secret

# Shut down Open LDAP database server again
skeleton(ldap_stop)

echo "Removing password override..."
cp "skeleton(ldap_configdir)/slapd.conf" "skeleton(ldap_configdir)/slapd.conf.tmp"
sed -e "s+rootpw+<m4quote>#</m4quote>rootpw+g" < "skeleton(ldap_configdir)/slapd.conf.tmp" > "skeleton(ldap_configdir)/slapd.conf"

</m4quote>)

define(<m4quote>ldap_restart</m4quote>, <m4quote>dnl
# Restart the Open LDAP database server again
skeleton(ldap_start)
wait_for_ldap_server_to_come_up

</m4quote>)


####### The Cyrus IMAPd server #######

define(<m4quote>cyrus_mail_functions</m4quote>, <m4quote></m4quote>)
define(<m4quote>cyrus_mail_test</m4quote>, <m4quote></m4quote>)
define(<m4quote>cyrus_mail_shutdown</m4quote>, <m4quote></m4quote>)
define(<m4quote>cyrus_mail_configure</m4quote>, <m4quote>dnl
 {
  echo skeleton(skeleton(cyrus_mail_server_varname)_password)
  sleep 1 # Uggly hack
  echo skeleton(skeleton(cyrus_mail_server_varname)_password)
 } |
  passwd cyrus
</m4quote>)
define(<m4quote>cyrus_mail_restart</m4quote>, <m4quote></m4quote>)


####### The Horde server #######

define(<m4quote>horde_functions</m4quote>, <m4quote></m4quote>)
define(<m4quote>horde_test</m4quote>, <m4quote></m4quote>)
define(<m4quote>horde_shutdown</m4quote>, <m4quote></m4quote>)
define(<m4quote>horde_configure</m4quote>, <m4quote></m4quote>)
define(<m4quote>horde_restart</m4quote>, <m4quote></m4quote>)


####### The Grimoire LDAP tree server #######

define(<m4quote>grimoire_ldap_functions</m4quote>, <m4quote></m4quote>)
define(<m4quote>grimoire_ldap_test</m4quote>, <m4quote></m4quote>)
define(<m4quote>grimoire_ldap_shutdown</m4quote>, <m4quote></m4quote>)
define(<m4quote>grimoire_ldap_configure</m4quote>, <m4quote></m4quote>)
define(<m4quote>grimoire_ldap_restart</m4quote>, <m4quote></m4quote>)


####### Generic functions for any filesystem tree role (home directory, mail etc) #######

define(<m4quote>grimoire_filesystem_functions</m4quote>, <m4quote></m4quote>)
define(<m4quote>grimoire_filesystem_test</m4quote>, <m4quote></m4quote>)
define(<m4quote>grimoire_filesystem_shutdown</m4quote>, <m4quote>define(<m4quote>grimoire_filesystem_shutdown</m4quote>, <m4quote></m4quote>)dnl
# Stop the Grimoire server
skeleton(grimoire_stop)

</m4quote>)
define(<m4quote>grimoire_filesystem_configure</m4quote>, <m4quote></m4quote>)
define(<m4quote>grimoire_filesystem_restart</m4quote>, <m4quote>define(<m4quote>grimoire_filesystem_restart</m4quote>, <m4quote></m4quote>)dnl
# Restart the Grimoire server
skeleton(grimoire_start)

</m4quote>)


####### User home directory server #######

define(<m4quote>grimoire_home_functions</m4quote>, <m4quote>dnl
# Create directories for a home group
create_homedir_homegroup () {
 groupdir="skeleton(homedir_server_path_unix)/$<m4quote>1</m4quote>"
 mkdir "$groupdir"
 cp -a /etc/groupskel "$groupdir/group.contents"
 chown -R :$<m4quote>2</m4quote> "$groupdir/group.contents"
 find "$groupdir/group.contents" -type d | while read name; do chmod g+xs "$name"; done
 chmod -R g+rw "$groupdir/group.contents"
 mkdir "$groupdir/group.users"
}

# Create directories for a user
create_homedir_user () {
 groupdir="skeleton(homedir_server_path_unix)/$<m4quote>1</m4quote>"
 cp -a /etc/skel "$groupdir/group.users/$<m4quote>3</m4quote>"
 chown -R $<m4quote>4</m4quote>:$<m4quote>5</m4quote> "$groupdir/group.users/$<m4quote>3</m4quote>"
 mkdir "$groupdir/group.users/$<m4quote>3</m4quote>/shared"
 ln -s "$groupdir/group.contents" "$groupdir/group.users/$<m4quote>3</m4quote>/shared/$<m4quote>2</m4quote>.people"
}

</m4quote>)

define(<m4quote>grimoire_home_test</m4quote>, <m4quote>grimoire_filesystem_test</m4quote>)
define(<m4quote>grimoire_home_shutdown</m4quote>, <m4quote>grimoire_filesystem_shutdown</m4quote>)
define(<m4quote>grimoire_home_configure</m4quote>, <m4quote>grimoire_filesystem_configure
mkdir -p /etc/skel
mkdir -p /etc/groupskel

echo "Creating user home directories..."
create_homedir_homegroup "" 1024 
create_homedir_homegroup administrators 1025
create_homedir_user administrators administrators superadmin 1024 1025
create_homedir_user administrators administrators demoadmin 1025 1025

</m4quote>)
define(<m4quote>grimoire_home_restart</m4quote>, <m4quote>grimoire_filesystem_restart</m4quote>)


####### Group home directory server #######

define(<m4quote>grimoire_group_home_functions</m4quote>, <m4quote>dnl
# Create directories for a group
create_homedir_group () {
 groupdir="skeleton(group_homedir_server_path_unix)/$<m4quote>1</m4quote>"
 mkdir "$groupdir"
 cp -a /etc/groupskel "$groupdir/group.contents"
 chown -R :$<m4quote>2</m4quote> "$groupdir/group.contents"
 find "$groupdir/group.contents" -type d | while read name; do chmod g+xs "$name"; done
 chmod -R g+rw "$groupdir/group.contents"
}

</m4quote>)
define(<m4quote>grimoire_group_home_test</m4quote>, <m4quote>grimoire_filesystem_test</m4quote>)
define(<m4quote>grimoire_group_home_shutdown</m4quote>, <m4quote>grimoire_filesystem_shutdown</m4quote>)
define(<m4quote>grimoire_group_home_configure</m4quote>, <m4quote>grimoire_filesystem_configure
mkdir -p /etc/skel
mkdir -p /etc/groupskel

echo "Creating group home directories..."
create_homedir_group "" 1026
create_homedir_group administrators 1027
</m4quote>)
define(<m4quote>grimoire_group_home_restart</m4quote>, <m4quote>grimoire_filesystem_restart</m4quote>)


####### Mail directory server #######

define(<m4quote>grimoire_courier_mail_functions</m4quote>, <m4quote>dnl
# Create mail directories for a home group
create_maildir_homegroup () {
 groupdir="skeleton(maildir_server_path_unix)/$<m4quote>1</m4quote>"
 mkdir "$groupdir"
 mkdir "$groupdir/group.users"
}

# Create mail directories for a user
create_maildir_user () {
 groupdir="skeleton(maildir_server_path_unix)/$<m4quote>1</m4quote>"
 mkdir "$groupdir/group.users/$<m4quote>2</m4quote>"
 chown -R $<m4quote>3</m4quote>:$<m4quote>4</m4quote> "$groupdir/group.users/$<m4quote>2</m4quote>"
}

</m4quote>)

define(<m4quote>grimoire_courier_mail_test</m4quote>, <m4quote>grimoire_filesystem_test</m4quote>)
define(<m4quote>grimoire_courier_mail_shutdown</m4quote>, <m4quote>grimoire_filesystem_shutdown</m4quote>)
define(<m4quote>grimoire_courier_mail_configure</m4quote>, <m4quote>grimoire_filesystem_configure
mkdir -p /etc/skel
mkdir -p /etc/groupskel

echo "Creating mail directories..."
create_maildir_homegroup ""
create_maildir_homegroup administrators
create_maildir_user administrators superadmin 1024 1025
create_maildir_user administrators demoadmin 1025 1025
</m4quote>)
define(<m4quote>grimoire_courier_mail_restart</m4quote>, <m4quote>grimoire_filesystem_restart</m4quote>)


####### Webware front-end server #######

define(<m4quote>grimoire_grimweb_functions</m4quote>, <m4quote></m4quote>)
define(<m4quote>grimoire_grimweb_test</m4quote>, <m4quote></m4quote>)
define(<m4quote>grimoire_grimweb_shutdown</m4quote>, <m4quote></m4quote>)
define(<m4quote>grimoire_grimweb_configure</m4quote>, <m4quote></m4quote>)
define(<m4quote>grimoire_grimweb_restart</m4quote>, <m4quote>
# Restart the web-server
skeleton(httpd_restart)

# Restart the WebWare application-server
skeleton(webkit_restart)
</m4quote>)


####### The Cyrus IMAPd server #######

define(<m4quote>grimoire_cyrus_mail_functions</m4quote>, <m4quote></m4quote>)
define(<m4quote>grimoire_cyrus_mail_test</m4quote>, <m4quote></m4quote>)
define(<m4quote>grimoire_cyrus_mail_shutdown</m4quote>, <m4quote></m4quote>)
define(<m4quote>grimoire_cyrus_mail_configure</m4quote>, <m4quote></m4quote>)
define(<m4quote>grimoire_cyrus_mail_restart</m4quote>, <m4quote></m4quote>)


####### CUPS printer server #######

define(<m4quote>grimoire_printers_functions</m4quote>, <m4quote></m4quote>)
define(<m4quote>grimoire_printers_test</m4quote>, <m4quote></m4quote>)
define(<m4quote>grimoire_printers_shutdown</m4quote>, <m4quote></m4quote>)
define(<m4quote>grimoire_printers_configure</m4quote>, <m4quote></m4quote>)
define(<m4quote>grimoire_printers_restart</m4quote>, <m4quote></m4quote>)



####### The main shell-script template #######

divert<m4quote></m4quote>dnl
#! /bin/bash
<m4quote>########</m4quote> Setup-script for skeleton(servername) <m4quote>########</m4quote>
# This template is instantiated by the setup.sh script.

# You will either have to run this script (setup.sh) as-is or each of
# its instructions one by one by hand (perheaps with some
<m4quote>#</m4quote> modifications) on skeleton(servername) to set up that server.

umask u=rwx,g=rx,o=rx

#### Functions used in the commands below ####
patsubst(skeleton(skeleton(server_varname)_roles), <m4quote>\([^ ]+\) *</m4quote>, <m4quote>\1_functions<m4quote></m4quote></m4quote>)dnl

#### Test that we can actually perform any installation on this machine ####
patsubst(skeleton(skeleton(server_varname)_roles), <m4quote>\([^ ]+\) *</m4quote>, <m4quote>\1_test<m4quote></m4quote></m4quote>)dnl

#### Shut down any servers ####
patsubst(skeleton(skeleton(server_varname)_roles), <m4quote>\([^ ]+\) *</m4quote>, <m4quote>\1_shutdown<m4quote></m4quote></m4quote>)dnl

#### Copy configuration files ####
echo "Copying new configuration files to system, moving existing files to filename.old..."
(
 cd filesystem
 find etc/ -type d | while read path; do mkdir -p "/$path"; done
 find etc/ \! -type d | while read path; do [ -e "/$path" ] && mv "/$path" "/$path.old"; cp -a "$path" "/$path"; done
)

#### Configure system ####
patsubst(skeleton(skeleton(server_varname)_roles), <m4quote>\([^ ]+\) *</m4quote>, <m4quote>\1_configure<m4quote></m4quote></m4quote>)dnl

#### Restart any servers ####
patsubst(skeleton(skeleton(server_varname)_roles), <m4quote>\([^ ]+\) *</m4quote>, <m4quote>\1_restart<m4quote></m4quote></m4quote>)dnl

# Whey, you are done now!
